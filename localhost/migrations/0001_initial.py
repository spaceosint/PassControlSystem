# Generated by Django 3.2.7 on 2022-01-09 13:58

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import localhost.models
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('patronymic', models.CharField(db_index=True, max_length=128, verbose_name='Отчество')),
                ('department', models.CharField(db_index=True, max_length=128, verbose_name='Отдел')),
                ('year', models.DateField(null=True, verbose_name='Дата рождения')),
                ('phone', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message="Номер телефона необходимо вводить в формате: '+7999999999'.", regex='^\\+?1?\\d{9,15}$')])),
                ('is_clients', models.BooleanField(default=True, verbose_name='Упр Клиентами')),
                ('is_workers', models.BooleanField(default=True, verbose_name='Упр Сотруднкками')),
                ('is_password', models.BooleanField(default=True, verbose_name='Упр Паролями')),
                ('time_create', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('time_update', models.DateTimeField(auto_now=True, verbose_name='Время изменения')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Закреплен_за', to=settings.AUTH_USER_MODEL, verbose_name='Закреплен_за_id')),
            ],
            options={
                'verbose_name': 'Сотрудники',
                'verbose_name_plural': 'Сотрудники',
                'ordering': ['time_create'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Cards',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(db_index=True, max_length=16, verbose_name='Номер')),
                ('credit', models.DecimalField(decimal_places=2, max_digits=6, verbose_name='Сумма')),
                ('time_create', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('time_update', models.DateTimeField(auto_now=True, verbose_name='Время изменения')),
            ],
            options={
                'verbose_name': 'Карты Клиента',
                'verbose_name_plural': 'Карты Клиента',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='UserIMG',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=100, verbose_name='Название')),
                ('img', models.ImageField(db_index=True, upload_to='user_img/', verbose_name='img')),
                ('size', models.SmallIntegerField(verbose_name='Размер')),
                ('time_create', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('user_img', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='user_img_id')),
            ],
        ),
        migrations.CreateModel(
            name='Posts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100, verbose_name='Должность')),
            ],
            options={
                'verbose_name': 'Должность',
                'verbose_name_plural': 'Должность',
                'ordering': ['id'],
                'unique_together': {('name',)},
            },
        ),
        migrations.CreateModel(
            name='Operation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(db_index=True, max_length=128, verbose_name='Ключь')),
                ('credit', models.DecimalField(decimal_places=2, max_digits=6, verbose_name='Сумма')),
                ('time_create', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('operation_cards', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='localhost.cards', verbose_name='OperationCards_id')),
            ],
            options={
                'verbose_name': 'Операции',
                'verbose_name_plural': 'Операции',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Images',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=100, verbose_name='Заголовок')),
                ('images', models.FileField(upload_to='%Y/%m/%d/', validators=[localhost.models.file_size_img, django.core.validators.FileExtensionValidator(['jpeg', 'png', 'bmp', 'gif'], message='Ваше изображение должен быть jpeg, png, bmp, gif')])),
                ('filesize', models.CharField(editable=False, max_length=100)),
                ('time_create', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('time_update', models.DateTimeField(auto_now=True, verbose_name='Время изменения')),
                ('user_images', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='user_document_id')),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=100, verbose_name='Заголовок')),
                ('content', models.TextField(db_index=True, verbose_name='Контент файла')),
                ('file', models.FileField(upload_to='%Y/%m/%d/', validators=[localhost.models.file_size_doc, django.core.validators.FileExtensionValidator(['txt', 'pdf', 'docx', 'doc'], message='Ваш файл должен быть txt, pdf, docx, doc')])),
                ('time_create', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('time_update', models.DateTimeField(auto_now=True, verbose_name='Время изменения')),
                ('user_document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='user_document_id')),
            ],
        ),
        migrations.CreateModel(
            name='Container',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(db_index=True, max_length=100, verbose_name='URL')),
                ('name', models.CharField(db_index=True, max_length=30, verbose_name='Название')),
                ('password', models.CharField(max_length=128, verbose_name='Пароль')),
                ('time_create', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('time_update', models.DateTimeField(auto_now=True, verbose_name='Время изменения')),
                ('usercontainer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='User_Container_id')),
            ],
            options={
                'verbose_name': 'Контейнер паролей',
                'verbose_name_plural': 'Контейнер паролей',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_name', models.CharField(db_index=True, max_length=128, verbose_name='Фамилия')),
                ('first_name', models.CharField(db_index=True, max_length=128, verbose_name='Имя')),
                ('year', models.DateField(null=True, verbose_name='Дата рождения')),
                ('phone', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message="Номер телефона необходимо вводить в формате: '+7999999999'.", regex='^\\+?1?\\d{9,15}$')])),
                ('user_client', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='User_Client_id')),
            ],
            options={
                'verbose_name': 'Клиенты',
                'verbose_name_plural': 'Клиенты',
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='cards',
            name='client_cards',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='localhost.client', verbose_name='Client_Cards_id'),
        ),
        migrations.AddField(
            model_name='userdata',
            name='posts',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='localhost.posts', verbose_name='Должность_id'),
        ),
        migrations.AddField(
            model_name='userdata',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
